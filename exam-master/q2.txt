a) A smell that could arise is refused bequest. In this case, Dogs, Cats, Bacteria and Plants must all eat, sleep, reproduce and interact with another organism. However, For certain classes, these methods are not used/ are redundant. For example, Bacteria must implement the sleep() method, which it does not really do in real life. Similarly, Plans must also implement the sleep() method, as well as the interact() method. In these cases, the classes do not add functionality, but instead remove it, and is therefore a smell as it is refused bequest. 

b). I will split it up so they do not all implement Organism. I would also remove certain methods from Organism and add them into later inheritence relationships to get rid of refused bequest. In saying that, I would add more inheritence relationships. I would ensure that there is a Mammal class (which implements Organism), which adds the required functionality, and that is extended by both Dogs and Cats. Then there would be a Plant class, and also a MicroOrganism class (for bacteria). In this case, Mammal would have the methods eat, sleep, reproduce, interact, where as plant and microorganism would have the methods of eat, reproduce, (and other ones that make sense to that class).